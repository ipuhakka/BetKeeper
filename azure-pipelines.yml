trigger:
- master
- development

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

- task: NuGetToolInstaller@1
  displayName: "Install NuGetToolInstaller"

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
  displayName: "NuGetCommand"

- task: DotNetCoreCLI@2
  displayName: ".NET Build"
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: ".NET Test"
  inputs:
    command: test
    projects: '**/TestCore.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: 'client'
  displayName: 'npm install'

- script: |
    npm test
  displayName: 'Test javascript'
  workingDirectory: 'client'

- script: |
    npm run build
  displayName: 'npm build'
  workingDirectory: 'client'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'client\build'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/build/webapp.zip'
    replaceExistingArchive: true
  displayName: 'Archive js'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\drop' 
    artifactName: 'drop'
  displayName: "Publish api artifacts"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'build'
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\build'
  displayName: 'Publish client artifacts'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))